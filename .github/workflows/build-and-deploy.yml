name: Build, Push and Deploy

on:
  push:
    branches:
      - main
      - dev
    tags:
      - v*
  workflow_dispatch:

env:
  IMAGE_NAME: ledger-bot
  SERVER_USER: ledger-bot
  SERVER_HOST: ${{ vars.SERVER_IP }}
  SERVER_PORT: 22

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Bot Version
        run: echo "RELEASE_VERSION=`git describe --tags --all | sed -e 's,.*/\(.*\),\1,'`" >> $GITHUB_ENV
        continue-on-error: true

      - name: Build image
        run: docker build --build-arg bot_version=${{ env.RELEASE_VERSION }} . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/Dom-TC/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ]  && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy-main:
    runs-on: ubuntu-latest
    needs: build-and-push

    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to main
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            # Set environment variables
            echo "LOG_TO_FILE=${{ vars.LOG_TO_FILE }}" > /opt/ledger-bot/env_file
            echo "LOG_FOLDER_PATH=${{ vars.LOG_FOLDER_PATH }}" > /opt/ledger-bot/env_file
            echo "BOT_CONFIG=${{ vars.BOT_CONFIG }}" >> /opt/ledger-bot/env_file
            echo "BOT_AIRTABLE_KEY=${{ secrets.BOT_AIRTABLE_KEY }}" >> /opt/ledger-bot/env_file
            echo "BOT_VERSION=${{ env.RELEASE_VERSION }}" >> /opt/ledger-bot/env_file
            echo "DISCORD_TOKEN=${{ secrets.BOT_DISCORD_TOKEN }}" >> /opt/ledger-bot/env_file
            echo "BOT_DISCORD_TOKEN=${{ secrets.BOT_DISCORD_TOKEN }}" >> /opt/ledger-bot/env_file
            echo "BOT_AIRTABLE_BASE=${{ secrets.BOT_AIRTABLE_BASE }}" >> /opt/ledger-bot/env_file
            echo "BOT_ID=${{ vars.BOT_ID }}" >> /opt/ledger-bot/env_file

            # Create log folder, if needed
            log_path="/opt/ledger-bot/ledger-bot$(echo "${{ vars.LOG_FOLDER_PATH }}" | sed 's#/etc/ledger-bot##')"
            echo log_path=$log_path
            mkdir -p $log_path

            # Rebuild container
            docker compose -f /opt/ledger-bot/docker-compose.yml down
            docker compose -f /opt/ledger-bot/docker-compose.yml pull
            docker compose -f /opt/ledger-bot/docker-compose.yml up -d

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-push

    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            # Set environment variables
            echo "LOG_TO_FILE=${{ vars.LOG_TO_FILE }}" > /opt/dev-ledger-bot/env_file
            echo "LOG_FOLDER_PATH=${{ vars.LOG_FOLDER_PATH }}" > /opt/dev-ledger-bot/env_file
            echo "BOT_CONFIG=${{ vars.BOT_CONFIG }}" >> /opt/dev-ledger-bot/env_file
            echo "BOT_AIRTABLE_KEY=${{ secrets.DEV_BOT_AIRTABLE_KEY }}" >> /opt/dev-ledger-bot/env_file
            echo "BOT_VERSION=${{ env.RELEASE_VERSION }}" >> /opt/dev-ledger-bot/env_file
            echo "DISCORD_TOKEN=${{ secrets.DEV_BOT_DISCORD_TOKEN }}" >> /opt/dev-ledger-bot/env_file
            echo "BOT_DISCORD_TOKEN=${{ secrets.DEV_BOT_DISCORD_TOKEN }}" >> /opt/dev-ledger-bot/env_file
            echo "BOT_AIRTABLE_BASE=${{ secrets.DEV_BOT_AIRTABLE_BASE }}" >> /opt/dev-ledger-bot/env_file
            echo "BOT_ID=${{ vars.DEV_BOT_ID }}" >> /opt/dev-ledger-bot/env_file

            # Create log folder, if needed
            log_path="/opt/dev-ledger-bot/ledger-bot$(echo "${{ vars.LOG_FOLDER_PATH }}" | sed 's#/etc/ledger-bot##')"
            echo log_path=$log_path
            mkdir -p $log_path

            # Rebuild container
            docker compose -f /opt/dev-ledger-bot/docker-compose.yml down
            docker compose -f /opt/dev-ledger-bot/docker-compose.yml pull
            docker compose -f /opt/dev-ledger-bot/docker-compose.yml up -d
